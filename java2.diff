--- a/gcj/math/BigInteger.java	2011-07-28 16:10:21.836676330 +0100
+++ b/gcj/math/BigInteger.java	2011-07-28 16:12:11.724650975 +0100
@@ -38,9 +38,6 @@
 
 package gcj.math;
 
-import gnu.classpath.Configuration;
-
-import gnu.java.lang.CPStringBuilder;
 import gnu.java.math.GMP;
 import gnu.java.math.MPN;
 
@@ -95,8 +92,7 @@
   /** The alter-ego GMP instance for this. */
   private transient GMP mpz;
 
-  private static final boolean USING_NATIVE = Configuration.WANT_NATIVE_BIG_INTEGER
-                                              && initializeLibrary();
+  private static final boolean USING_NATIVE = initializeLibrary();
 
   static
   {
@@ -418,14 +414,14 @@
     boolean result;
     try
     {
-      System.loadLibrary("javamath");
+      System.loadLibrary("gmp-jni");
       GMP.natInitializeLibrary();
       result = true;
     }
     catch (Throwable x)
     {
       result = false;
-      if (Configuration.DEBUG)
+      if (Boolean.getBoolean("gnu.native.debug"))
         {
           log.info("Unable to use native BigInteger: " + x);
           log.info("Will use a pure Java implementation instead");
@@ -1760,7 +1756,7 @@
     return shift(this, -n);
   }
 
-  private void format(int radix, CPStringBuilder buffer)
+  private void format(int radix, StringBuilder buffer)
   {
     if (words == null)
       buffer.append(Integer.toString(ival, radix));
@@ -1837,7 +1833,7 @@
     if (ival <= 2)
       return Long.toString(longValue(), radix);
     int buf_size = ival * (MPN.chars_per_word(radix) + 1);
-    CPStringBuilder buffer = new CPStringBuilder(buf_size);
+    StringBuilder buffer = new StringBuilder(buf_size);
     format(radix, buffer);
     return buffer.toString();
   }
